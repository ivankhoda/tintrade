# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: operations.proto for package ''

require 'grpc'
require 'operations_pb'

module OperationsService
  class Service

    include ::GRPC::GenericService

    self.marshal_class_method = :encode
    self.unmarshal_class_method = :decode
    self.service_name = 'OperationsService'

    # Метод получения списка операций по счёту.При работе с данным методом необходимо учитывать
    # [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
    rpc :GetOperations, ::OperationsRequest, ::OperationsResponse
    # Метод получения портфеля по счёту.
    rpc :GetPortfolio, ::PortfolioRequest, ::PortfolioResponse
    # Метод получения списка позиций по счёту.
    rpc :GetPositions, ::PositionsRequest, ::PositionsResponse
    # Метод получения доступного остатка для вывода средств.
    rpc :GetWithdrawLimits, ::WithdrawLimitsRequest, ::WithdrawLimitsResponse
    # Метод получения брокерского отчёта.
    rpc :GetBrokerReport, ::BrokerReportRequest, ::BrokerReportResponse
    # Метод получения отчёта "Справка о доходах за пределами РФ".
    rpc :GetDividendsForeignIssuer, ::GetDividendsForeignIssuerRequest, ::GetDividendsForeignIssuerResponse
    # Метод получения списка операций по счёту с пагинацией. При работе с данным методом необходимо учитывать
    # [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
    rpc :GetOperationsByCursor, ::GetOperationsByCursorRequest, ::GetOperationsByCursorResponse
  end

  Stub = Service.rpc_stub_class
end
# Сервис предназначен для получения:</br> **1**.  списка операций по счёту;</br> **2**.
# портфеля по счёту;</br> **3**. позиций ценных бумаг на счёте;</br> **4**.
# доступного остатка для вывода средств;</br> **5**. получения различных отчётов.
module OperationsStreamService
  class Service

    include ::GRPC::GenericService

    self.marshal_class_method = :encode
    self.unmarshal_class_method = :decode
    self.service_name = 'OperationsStreamService'

    # Server-side stream обновлений портфеля
    rpc :PortfolioStream, ::PortfolioStreamRequest, stream(::PortfolioStreamResponse)
    # Server-side stream обновлений информации по изменению позиций портфеля
    rpc :PositionsStream, ::PositionsStreamRequest, stream(::PositionsStreamResponse)
  end

  Stub = Service.rpc_stub_class
end
